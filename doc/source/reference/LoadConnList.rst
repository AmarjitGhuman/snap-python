LoadConnList 
'''''''''''''''

.. function:: LoadConnList(GraphType,InFNm)

Loads a (directed, undirected or multi) graph from a text file *InFNm* with 1 node and all its edges in a single line.

Loads Whitespace separated file of several columns: <source node="" id=""> <destination node="" id1=""> <destination node="" id2="">. For example, '1 2 3' encodes edges 1-->2 and 1-->3. Note that this format allows for saving isolated nodes.

Parameters:

- *GraphType*: class (input)
    Type of graph to create. :class:`PNGraph`, :class:`PUNGraph`, or :class:`PNEANet`

- *InFNm*: string (input)
    File Name with the description of the graph nodes and edges.

Return value:

- graph
	A Snap.py graph of the specified type generated by LoadConnList.

The following example shows how to construct a graph using :func:`LoadConnList` with a file named "test.txt"::

    import snap

    Graph = snap.LoadConnList(snap.PNGraph, "test.txt")
    for EI in Graph.Edges():
        print "edge (%d, %d)" % (EI.GetSrcNId(), EI.GetDstNId())
	
    Graph = snap.LoadConnList(snap.PUNGraph, "test.txt")
    for EI in Graph.Edges():
        print "edge (%d, %d)" % (EI.GetSrcNId(), EI.GetDstNId())
	
    Graph = snap.LoadConnList(snap.PNEANet, "test.txt")
    for EI in Graph.Edges():
        print "edge (%d, %d)" % (EI.GetSrcNId(), EI.GetDstNId())
	
