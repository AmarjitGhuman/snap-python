LoadConnList 
'''''''''''''''
.. note::

    This page is a draft and under revision.


.. function:: LoadConnList(TGraph,InFNm)

Loads a (directed, undirected or multi) graph from a text file InFNm with 1 node and all its edges in a single line.

Loads Whitespace separated file of several columns: <source node="" id=""> <destination node="" id1=""> <destination node="" id2="">

Whitespace separated file of several columns: <source node="" id=""> <destination node="" id1=""> <destination node="" id2=""> ... First column of each line contains a source node id followed by ids of the destination nodes. For example, '1 2 3' encodes edges 1-->2 and 1-->3. Note that this format allows for saving isolated nodes.

Parameters:

- *TGraph*: graph type (input)
	Snap.py Graph type. One of these:: :class:`TNGraph`, :class:`TUNGraph`, and :class:`TNEANet`.

- *InFNm*: string (input)
    File Name with the description of the graph nodes and edges.

Return value:

- PGraph (output)
	Snap.py Graph generated by LoadConnList.

The following example shows how to construct a graph using LoadConnList function::

    import snap

    Graph = snap.LoadConnList(snap.PNGraph, "test.txt")
    for EI in Graph.Edges():
        print "edge (%d, %d)" % (EI.GetSrcNId(), EI.GetDstNId())
	
    Graph = snap.LoadConnList(snap.PUNGraph, "test.txt")
    for EI in Graph.Edges():
        print "edge (%d, %d)" % (EI.GetSrcNId(), EI.GetDstNId())
	
    Graph = snap.LoadConnList(snap.PNEANet, "test.txt")
    for EI in Graph.Edges():
        print "edge (%d, %d)" % (EI.GetSrcNId(), EI.GetDstNId())
	
